from .base import *

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

for template_engine in TEMPLATES:
    template_engine['OPTIONS']['debug'] = True

# SECURITY WARNING: define the correct hosts in production!

# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.ngrok.io']

INTERNAL_IPS = ['::1', '127.0.0.1']

# Application definition
INSTALLED_APPS += [
    'wagtail.contrib.styleguide',
    'debug_toolbar',
    'naomi',
]

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'HOST': 'db',
        'PORT': '5432',
        'CONN_MAX_AGE': 1000,
        'ATOMIC_REQUESTS': True,
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'es-CO'

# Cache
# https://docs.djangoproject.com/en/2.0/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        'KEY_PREFIX': 'xprende',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        }
    }
}
CACHE_MIDDLEWARE_SECONDS = 10

# Email backend
# https://docs.djangoproject.com/en/2.0/topics/email/#email-backends
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Celery
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_SEND_TASK_ERROR_EMAILS = True
# CELERY_EAGER_PROPAGATES_EXCEPTIONS = True
# CELERY_TASK_ALWAYS_EAGER = True

# Debug toolbar
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

# Google maps
GOOGLE_MAPS_V3_APIKEY = 'AIzaSyAVKOSTgqA8vY3w_ao61tPEYJ2qvhd4qFk'
GOOGLE_MAPS_V3_LANGUAGE = 'es'
GEO_WIDGET_ZOOM = 14

# Analytics stuff
GOOGLE_TAG_MANAGER = False
GOOGLE_ANALYTICS_KEY = False

# Naomi
EMAIL_BACKEND = 'naomi.mail.backends.naomi.NaomiBackend'
EMAIL_FILE_PATH = os.path.join(MEDIA_ROOT, 'tmp_email')

# Robots
ROBOTS_SITEMAP_URLS = [
    'http://localhost/sitemap.xml',
]

# Wagtail
WAGTAILIMAGES_FEATURE_DETECTION_ENABLED = True

# Searching
# http://docs.wagtail.io/en/latest/topics/search/backends.html#wagtailsearch-backends
WAGTAILSEARCH_BACKENDS = {
    'default': {
        'BACKEND': 'wagtail.search.backends.elasticsearch5',
        'URLS': ['http://elastic:changeme@elasticsearch:9200'],
        'INDEX': 'cms',
        'ATOMIC_REBUILD': True,
        'TIMEOUT': 5,
        'OPTIONS': {},
        'INDEX_SETTINGS': {},
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'logstash': {
            '()': 'logstash_async.formatter.DjangoLogstashFormatter',
            'message_type': 'python-logstash',
            'fqdn': False,
            'extra_prefix': 'dev',
            'extra': {
                'application': PROJECT_DIR,
                'project_path': BASE_DIR,
                'environment': 'development'
            },
            'tags': ['core', 'django.request', 'django.security', 'wagtail'],
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console'],
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'config/logs/%s.log' % SITE_TITLE.lower()),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 50,
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'logfile': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': 'error.log'
        },
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash_async.handler.AsynchronousLogstashHandler',
            'transport': 'logstash_async.transport.TcpTransport',
            'host': 'logstash.host.tld',
            'port': 5959,
            'database_path': '{}/logstash.db'.format(MEDIA_ROOT),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['logfile', 'logstash'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'WARNING',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['logstash', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
            'formatter': 'logstash',
        },
        'core': {
            'handlers': ['file', 'logstash', 'mail_admins'],
            'propagate': True,
            'level': 'ERROR',
            'formatter': 'verbose',
        },
        'wagtail': {
            'handlers': ['file', 'logstash', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
            'formatter': 'verbose',
        },
        'django.security': {
            'handlers': ['logstash', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
            'formatter': 'verbose',
        },
    }
}

try:
    from .local import *
except ImportError:
    pass
